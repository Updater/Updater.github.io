.row
  .col-xs-12
    div(ng-include="'partials/navbar.html'")


.row
  .col-xs-12
    h1 Updater CSS Style Guide


.row
  .col-xs-12
    p
      | Welcome to the Updater CSS Styleguide. It's pretty rad. Before reading this, it's recommended that you are familiar with or research
      strong<> specificity
      | , the SCSS syntax, and common network bottlenecks/reasons for slow page loading time.
    p
      | Some of these practices are not fully implemented yet so please update/upgrade files as you work on them.
    p
      | If you're visiting from the internet, feel free to learn from our style. This is a guide we use for our own apps internally at Updater. We encourage you to set up one that works for your own team.


    h2 CSS Syntax Style
    ul
      li
        | Use a two space indent with no tabs.
      li
        | Put spaces after
        code
          | :
        | in property declarations.
      li
        | Put spaces before
        code
          | {
        | in rule declarations.
      li
        | Use hex color codes
        code #000
        | unless using rgba.
      li
        | Use
        code
          | //
        | for inline comments (instead of
        code
          | /* */
        | ).
      li
        | Document styles as much as possible with inline comments that explain what the code does if it's not perfectly clear.
      li
        | Comments should always go on the line above the thing they describe.

    p Here is good example syntax:
    pre
      code
        | // This is a good example!
        br
        | .styleguide-format {
        br
        |   border: 1px solid #0f0;
        br
        |   color: #000;
        br
        |   background: rgba(0,0,0,0.5);
        br
        |   .border-radius(5px, 30px);
        br
        |   // Disables strange chrome-adding behavior in Safari.
        br
        |   -webkit-rendering-shadow-chrome: false;
        br
        | }


    h2 SCSS Style
    ul
      li
        | Any
        code $variable
        | or
        code .mixin
        | that is used in more than one file should be defined in
        code assets/css/globals/
        | . Others should be put at the top of the file where they're used.
      li
        | As a rule of thumb, don't nest further than 3 levels deep. If you find yourself going further, think about reorganizing your rules (either the specificity needed, or the layout of the nesting). The are 2 dangers here besides code complexity. One is that you will create styles that are borderline impossible to override in other modules because they're too specific. The other is that you will bloat the style files and slow down the loading speed of the site.


    h2 File Organization
    p
      | All styles should
      strong<> ALWAYS
      | be written in well-orgainzed files. CSS should
      strong<> never
      | be written inline in your HTML for any reason.
    p
      | In general, the CSS file organization should be separated into page/content specific files and any shared code written as modules and follow something like this:

    pre
      code
        | assets
        br
        | └── css
        br
        |     ├── globals
        br
        |     │   ├── fonts.scss
        br
        |     │   ├── icons.scss
        br
        |     │   ├── colors.scss
        br
        |     │   ├── header.scss
        br
        |     │   ├── footer.scss
        br
        |     │   └── agent.scss
        br
        |     │
        br
        |     ├── partner
        br
        |     │   ├── bhg.scss
        br
        |     │   ├── allentate.scss
        br
        |     │   └── remax.scss
        br
        |     │
        br
        |     ├── global.scss
        br
        |     ├── homepage.scss
        br
        |     ├── change_of_address.scss
        br
        |     └── agent_signup.scss

    p
      | You should explicitly
      strong<> import
      | any global SCSS that is required for the document you're working on. Do not import files that are not in the globals folder. If they are shared styles, they should always go in globals. Here's a good example:
    pre
      code
        | @import 'globals/fonts';
        br
        | @import 'globals/colors';
        br
        br
        | .rule {
        br
        |   .font-family();
        br
        |   background: green;
        br
        |   ...
        br
        | }
    p
      | Any partner-specific CSS should be stored in the assets/css/partner/ folder. This is a temporary measure as we move to storing partner style options in a more scalable manner.


    h2 Pixels vs. Ems
    p
      | Use
      code 62.5%
      | for the root
      code font-size
      | , because it makes all other numbers easier to understand. For all other
      code font-size
      | s, use
      code em
      | s. This is because versions of IE below 10 do not offer zoom functionality and can only change relative font sizes for accessibility. For the same reason, don't use
      code rem
      | s because of their poor historical browser support. Additionally,
      code line-height
      | should never have a unit because it does not inherit a percentage value of its parent element, but instead is based on a multiplier of the font-size.
    p
      | Reference:
      a(href='http://snook.ca/archives/html_and_css/font-size-with-rem') Pixels vs Ems


    h2 Class naming conventions
    p
      | Never reference
      code js-
      | prefixed class names from CSS files.
      code js-
      | are used exclusively from JS files. Try to give classes descriptive names like
      code .header-logo-container
      | instead of something like
      code .blue
      | .


    h2 Specificity (classes vs. ids)
    p
      | Because of their very high specificity it's recommended to never use IDs for CSS. Use a descriptive class name and nest as little as possible so that your modular CSS rules are easy to override in other sections of the site.
    p
      | Only start with an element + class namespace when writing styles that need to override other classes and when the styles will only ever be applied to one type of element, prefer concise selectors by default, and use as little specificity as possible. Always include a newline between selectors. Here is a good example:
    pre
      code
        | ul.category-list
        br
        |   li.item Category 1
        br
        |   li.item Category 2
        br
        |   li.item Category 3


    h2 CSS Specificity guidelines
    ul
      li
        | If you must use an id selector (
        code #selector
        | ) make sure that you have no more than one in your rule declaration. A rule like
        code #header .search #quicksearch { ... }
        | is considered harmful.
      li
        | When modifying an existing element for a specific use, try to use specific class names. Instead of
        code .listings-layout.bigger
        | use rules like
        code .listings-layout.listings-bigger
        | . Think about
        code ack/grepping
        | your code in the future.
      li
        | The class names
        code disabled
        | ,
        code mousedown
        | ,
        code danger
        | ,
        code hover
        | ,
        code selected
        | ,
        code active
        | and any others used by Bootstrap should always be namespaced by a class (
        code button.selected
        | is a good example).


    h2 Grid Layouts
    p
      | We use Bootstrap's grid system and this should be embraced in design and development as much as possible. The grid system keeps positioning styles out of our CSS and makes our HTML easier to read and write.

